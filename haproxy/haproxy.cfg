global
	log /dev/log	local0
	log /dev/log	local1 notice
	chroot /var/lib/haproxy
	stats socket /run/haproxy/admin.sock mode 660 level admin
	stats timeout 30s
	user haproxy
	group haproxy
	daemon

	# Default SSL material locations
	ca-base /etc/ssl/certs
	crt-base /etc/ssl/private

	# See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
        ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
        ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
	log	global
	mode	http
	option	httplog
	option	dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
	errorfile 400 /etc/haproxy/errors/400.http
	errorfile 403 /etc/haproxy/errors/403.http
	errorfile 408 /etc/haproxy/errors/408.http
	errorfile 500 /etc/haproxy/errors/500.http
	errorfile 502 /etc/haproxy/errors/502.http
	errorfile 503 /etc/haproxy/errors/503.http
	errorfile 504 /etc/haproxy/errors/504.http

# Redirect to TLS port
frontend httpfrontend
        bind :80
        mode http
        http-request redirect scheme https unless { ssl_fc }

frontend tcpfrontend
        bind :443 
	mode tcp
        
        tcp-request inspect-delay 5s
        tcp-request content accept if { req_ssl_hello_type 1 }

        acl ACL_NAS req_ssl_sni -i nas.skynetsystems.io
        acl ACL_VCENTER req_ssl_sni -i vcenter.skynetsystems.io
        acl ACL_OPSMAN req_ssl_sni -i opsman.skynetsystems.io
        acl ACL_GOROUTER req_ssl_sni -i app-accelerator-server.apps.skynetsystems.io doppler.system.skynetsystems.io tas-portal.apps.skynetsystems.io log-cache.system.skynetsystems.io api.system.skynetsystems.io  apps.system.skynetsystems.io login.system.skynetsystems.io uaa.system.skynetsystems.io 0-proxy-p-mysql-ert.system.skynetsystems.io 
        use_backend nas if ACL_NAS
        use_backend vcenter if ACL_VCENTER
        use_backend opsman if ACL_OPSMAN
        use_backend gorouter if ACL_GOROUTER

frontend tcppostgres
        bind :5432
        mode tcp

        tcp-request inspect-delay 5s
        tcp-request content accept if { req_ssl_hello_type 1 }
        acl ACL_POSTGRES req_ssl_sni -i db.skynetsystems.io
        use_backend postgres if ACL_POSTGRES

frontend tcpredis
        bind :5432
        mode tcp

        tcp-request inspect-delay 5s
        tcp-request content accept if { req_ssl_hello_type 1 }
        acl ACL_REDIS req_ssl_sni -i cache.skynetsystems.io
        use_backend redis if ACL_REDIS

backend opsman
        balance roundrobin
        mode tcp
        server opsman-server 192.168.2.85:443 check maxconn 20

backend nas
        balance roundrobin
        mode tcp
        server nas-server 192.168.1.50:443 check maxconn 20

backend vcenter
        balance roundrobin
        mode tcp
        server vcenter-server 192.168.2.80:443 check maxconn 20

backend postgres
        balance roundrobin
        mode tcp
        server postgres-server 192.168.2.139:5432 check maxconn 20

backend redis
        balance roundrobin
        mode tcp
        server postgres-server 192.168.2.139:6379 check maxconn 20

backend gorouter
        balance roundrobin
        mode tcp
        server gorouter-server 192.168.2.3:443 check maxconn 20
